---
#cluster.name: MyScalewayElkCluster
#network.host: 10.65.4.39
#node.name: elk1
#discovery.zen.ping.unicast.hosts: ["10.65.4.39","10.64.188.101","10.65.14.59"]
#discovery.zen.minimum_master_nodes: 2
#node.master: true

- name: Create ELK instances
  include_tasks: roles/setup-elk/tasks/start_instance.yml

- name: Wait for instance to be booted
  wait_for_connection:
    sleep: 10
    timeout: 300

- name: Wait for cloud-init configuration to be completed
  wait_for:
    path: /var/log/cloud-init-output.log
    search_regex: 'elk node ready for configuration'

- name: Gather facts now that the instance is running
  setup:
    gather_timeout: 30
- name: Get host list
  set_fact:
    local_adresses: '{{ local_adresses + [ item ] }}'
  with_items: "{{ hostvars[inventory_hostname].groups['elk-nodes'] }}"
  vars:
    local_adresses: []

- name: Add elk nodes to hosts
  lineinfile: dest=/etc/hosts line="{{ hostvars[item]['ansible_all_ipv4_addresses'][0] }}    {{ hostvars[item]['inventory_hostname'] }}"
  with_items: "{{ local_adresses }}"

- name: Add cluster.name to config file
  lineinfile: dest={{ elk_config }} line="cluster.name{{":"}} {{ cluster_name }}"

- name: Add network.host to config file
  lineinfile: dest={{ elk_config }} line="network.host{{":"}} {{ ansible_all_ipv4_addresses[0] }}"

- name: Add node.name to conCfig file
  lineinfile: dest={{ elk_config }} line="node.name{{":"}} {{ inventory_hostname }}"

- name: 
  set_fact:
    initial_master_nodes: "{{ hostvars[inventory_hostname].groups['elk-nodes']| join(',') }}"

- name: Add initial_master_nodes to conCfig file
  lineinfile: dest={{ elk_config }} line="cluster.initial_master_nodes{{":"}} {{ initial_master_nodes }}"

- name: Add minimum_master_nodes to config file
  lineinfile: dest={{ elk_config }} line="discovery.zen.minimum_master_nodes{{":"}} 2"

- name: Add unicast_hosts to config file
  lineinfile: dest={{ elk_config }} line="discovery.zen.ping.unicast.hosts{{":"}} {{ local_adresses }}"

- name: Define master node
  lineinfile: dest={{ elk_config }} line="node.master{{":"}} true"
  when: inventory_hostname == master_node

- name: Define data nodes
  lineinfile: dest={{ elk_config }} line="node.data{{":"}} true"
  when: inventory_hostname != master_node

- name: Enable elasticsearch service
  systemd:
    name: elasticsearch
    enabled: yes
    masked: no

- name: Start elasticsearch service
  systemd:
    name: elasticsearch
    state: started

- name: Get ELK master
  delegate_to: localhost
  uri:
    url: "http://{{ master_node }}:9200/_cat/master"
    return_content: yes
  register: elk
  when: inventory_hostname == master_node

- name: Verify ELK master
  debug: msg="Wrong ELK master {{':'}} {{ elk.content.split()[-1] }}"
  when: inventory_hostname == master_node and elk.content.split()[-1].strip() != master_node
  failed_when: elk.content.split()[-1].strip() != master_node

- name: Get ELK cluster status
  delegate_to: localhost
  uri:
    url: "http://{{ master_node }}:9200/_cluster/health"
    return_content: yes
  register: status
  when: inventory_hostname == master_node

- name: ELK Cluster Status
  debug: msg="ELK Cluster Status {{':'}} {{ status.json.status }}"
  when: inventory_hostname == master_node
